"""
PDF export service for SoftBankCashWire
Handles PDF report generation for official documentation
"""
import io
from datetime import datetime
from typing import Dict, Any, List
from decimal import Decimal
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.platypus.flowables import HRFlowable
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PDFExportService:
    """Service for generating PDF reports"""
    
    @classmethod
    def _create_header(cls, title: str, subtitle: str = None) -> List:
        """Create PDF header with title and subtitle"""
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=12,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#2563eb')
        )
        
        subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=styles['Normal'],
            fontSize=12,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#6b7280')
        )
        
        elements = []
        elements.append(Paragraph(title, title_style))
        
        if subtitle:
            elements.append(Paragraph(subtitle, subtitle_style))
        
        elements.append(HRFlowable(width="100%", thickness=1, color=colors.HexColor('#e5e7eb')))
        elements.append(Spacer(1, 12))
        
        return elements
    
    @classmethod
    def _create_footer(cls) -> List:
        """Create PDF footer"""
        styles = getSampleStyleSheet()
        
        footer_style = ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontSize=8,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#6b7280')
        )
        
        elements = []
        elements.append(Spacer(1, 20))
        elements.append(HRFlowable(width="100%", thickness=1, color=colors.HexColor('#e5e7eb')))
        elements.append(Spacer(1, 6))
        elements.append(Paragraph(
            f"Generated by SoftBankCashWire on {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC",
            footer_style
        ))
        
        return elements
    
    @classmethod
    def _format_currency(cls, amount: str) -> str:
        """Format currency amount for display"""
        try:
            decimal_amount = Decimal(amount)
            return f"£{decimal_amount:,.2f}"
        except:
            return f"£{amount}"
    
    @classmethod
    def generate_transaction_summary_pdf(cls, report_data: Dict[str, Any]) -> bytes:
        """
        Generate PDF for transaction summary report
        
        Args:
            report_data: Transaction summary report data
            
        Returns:
            PDF bytes
        """
        try:
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72,
                                  topMargin=72, bottomMargin=18)
            
            elements = []
            styles = getSampleStyleSheet()
            
            # Header
            period_str = f"{report_data['period']['start_date'][:10]} to {report_data['period']['end_date'][:10]}"
            elements.extend(cls._create_header("Transaction Summary Report", period_str))
            
            # Summary section
            summary_style = ParagraphStyle(
                'SummaryHeader',
                parent=styles['Heading2'],
                fontSize=14,
                spaceAfter=12,
                textColor=colors.HexColor('#1f2937')
            )
            
            elements.append(Paragraph("Summary", summary_style))
            
            summary_data = [
                ['Metric', 'Value'],
                ['Total Transactions', str(report_data['summary']['total_transactions'])],
                ['Total Volume', cls._format_currency(report_data['summary']['total_volume'])],
                ['Average Transaction', cls._format_currency(report_data['summary']['average_transaction_amount'])],
                ['Transfer Count', str(report_data['summary']['transfer_count'])],
                ['Event Contributions', str(report_data['summary']['event_contribution_count'])],
                ['Average Transfer', cls._format_currency(report_data['summary']['average_transfer_amount'])],
                ['Average Contribution', cls._format_currency(report_data['summary']['average_contribution_amount'])]
            ]
            
            summary_table = Table(summary_data, colWidths=[3*inch, 2*inch])
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
            ]))
            
            elements.append(summary_table)
            elements.append(Spacer(1, 20))
            
            # Category breakdown
            if report_data['category_breakdown']:
                elements.append(Paragraph("Category Breakdown", summary_style))
                
                category_data = [['Category', 'Count', 'Total Amount', 'Average', 'Percentage']]
                
                for category in report_data['category_breakdown']:
                    category_data.append([
                        category['category'],
                        str(category['transaction_count']),
                        cls._format_currency(category['total_amount']),
                        cls._format_currency(category['average_amount']),
                        f"{category['percentage_of_volume']:.1f}%"
                    ])
                
                category_table = Table(category_data, colWidths=[1.5*inch, 0.8*inch, 1.2*inch, 1.2*inch, 1*inch])
                category_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                    ('ALIGN', (0, 0), (0, -1), 'LEFT'),
                    ('ALIGN', (1, 0), (-1, -1), 'RIGHT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 9),
                    ('FONTSIZE', (0, 1), (-1, -1), 8),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
                ]))
                
                elements.append(category_table)
            
            # Footer
            elements.extend(cls._create_footer())
            
            doc.build(elements)
            buffer.seek(0)
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Failed to generate transaction summary PDF: {str(e)}")
            raise
    
    @classmethod
    def generate_user_activity_pdf(cls, report_data: Dict[str, Any]) -> bytes:
        """
        Generate PDF for user activity report
        
        Args:
            report_data: User activity report data
            
        Returns:
            PDF bytes
        """
        try:
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72,
                                  topMargin=72, bottomMargin=18)
            
            elements = []
            styles = getSampleStyleSheet()
            
            # Header
            period_str = f"{report_data['period']['start_date'][:10]} to {report_data['period']['end_date'][:10]}"
            elements.extend(cls._create_header("User Activity Report", period_str))
            
            # Summary
            summary_style = ParagraphStyle(
                'SummaryHeader',
                parent=styles['Heading2'],
                fontSize=14,
                spaceAfter=12,
                textColor=colors.HexColor('#1f2937')
            )
            
            elements.append(Paragraph("Summary", summary_style))
            
            summary_data = [
                ['Metric', 'Value'],
                ['Total Users', str(report_data['summary']['total_users'])],
                ['Active Users', str(report_data['summary']['active_users'])]
            ]
            
            summary_table = Table(summary_data, colWidths=[3*inch, 2*inch])
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
            ]))
            
            elements.append(summary_table)
            elements.append(Spacer(1, 20))
            
            # User activities (paginated)
            elements.append(Paragraph("User Activities", summary_style))
            
            # Split users into chunks for better pagination
            users_per_page = 15
            user_chunks = [report_data['user_activities'][i:i + users_per_page] 
                          for i in range(0, len(report_data['user_activities']), users_per_page)]
            
            for chunk_idx, user_chunk in enumerate(user_chunks):
                if chunk_idx > 0:
                    elements.append(PageBreak())
                    elements.append(Paragraph("User Activities (continued)", summary_style))
                
                user_data = [['Name', 'Email', 'Balance', 'Transactions', 'Sent', 'Received', 'Net']]
                
                for user in user_chunk:
                    user_data.append([
                        user['user_name'][:20] + ('...' if len(user['user_name']) > 20 else ''),
                        user['user_email'][:25] + ('...' if len(user['user_email']) > 25 else ''),
                        cls._format_currency(user['current_balance']),
                        str(user['transaction_activity']['total_transactions']),
                        cls._format_currency(user['transaction_activity']['total_sent']),
                        cls._format_currency(user['transaction_activity']['total_received']),
                        cls._format_currency(user['transaction_activity']['net_amount'])
                    ])
                
                user_table = Table(user_data, colWidths=[1.2*inch, 1.5*inch, 0.8*inch, 0.6*inch, 0.8*inch, 0.8*inch, 0.8*inch])
                user_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                    ('ALIGN', (0, 0), (1, -1), 'LEFT'),
                    ('ALIGN', (2, 0), (-1, -1), 'RIGHT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 8),
                    ('FONTSIZE', (0, 1), (-1, -1), 7),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
                ]))
                
                elements.append(user_table)
                elements.append(Spacer(1, 12))
            
            # Footer
            elements.extend(cls._create_footer())
            
            doc.build(elements)
            buffer.seek(0)
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Failed to generate user activity PDF: {str(e)}")
            raise
    
    @classmethod
    def generate_event_account_pdf(cls, report_data: Dict[str, Any]) -> bytes:
        """
        Generate PDF for event account report
        
        Args:
            report_data: Event account report data
            
        Returns:
            PDF bytes
        """
        try:
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72,
                                  topMargin=72, bottomMargin=18)
            
            elements = []
            styles = getSampleStyleSheet()
            
            # Header
            period_str = f"{report_data['period']['start_date'][:10]} to {report_data['period']['end_date'][:10]}"
            elements.extend(cls._create_header("Event Account Report", period_str))
            
            # Summary
            summary_style = ParagraphStyle(
                'SummaryHeader',
                parent=styles['Heading2'],
                fontSize=14,
                spaceAfter=12,
                textColor=colors.HexColor('#1f2937')
            )
            
            elements.append(Paragraph("Summary", summary_style))
            
            summary_data = [
                ['Metric', 'Value'],
                ['Total Events', str(report_data['summary']['total_events'])],
                ['Active Events', str(report_data['summary']['active_events'])],
                ['Completed Events', str(report_data['summary']['completed_events'])],
                ['Expired Events', str(report_data['summary']['expired_events'])],
                ['Total Target Amount', cls._format_currency(report_data['summary']['total_target_amount'])],
                ['Total Raised Amount', cls._format_currency(report_data['summary']['total_raised_amount'])],
                ['Overall Progress', f"{report_data['summary']['overall_progress_percentage']:.1f}%"]
            ]
            
            summary_table = Table(summary_data, colWidths=[3*inch, 2*inch])
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
            ]))
            
            elements.append(summary_table)
            elements.append(Spacer(1, 20))
            
            # Event details
            if report_data['events']:
                elements.append(Paragraph("Event Details", summary_style))
                
                # Split events into chunks for better pagination
                events_per_page = 10
                event_chunks = [report_data['events'][i:i + events_per_page] 
                               for i in range(0, len(report_data['events']), events_per_page)]
                
                for chunk_idx, event_chunk in enumerate(event_chunks):
                    if chunk_idx > 0:
                        elements.append(PageBreak())
                        elements.append(Paragraph("Event Details (continued)", summary_style))
                    
                    event_data = [['Event Name', 'Creator', 'Target', 'Current', 'Progress', 'Contributors']]
                    
                    for event in event_chunk:
                        event_data.append([
                            event['event_name'][:25] + ('...' if len(event['event_name']) > 25 else ''),
                            event['creator_name'][:15] + ('...' if len(event['creator_name']) > 15 else ''),
                            cls._format_currency(event['target_amount']),
                            cls._format_currency(event['current_amount']),
                            f"{event['progress_percentage']:.1f}%",
                            str(event['unique_contributors'])
                        ])
                    
                    event_table = Table(event_data, colWidths=[1.8*inch, 1.2*inch, 1*inch, 1*inch, 0.8*inch, 0.8*inch])
                    event_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                        ('ALIGN', (0, 0), (1, -1), 'LEFT'),
                        ('ALIGN', (2, 0), (-1, -1), 'RIGHT'),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, 0), 8),
                        ('FONTSIZE', (0, 1), (-1, -1), 7),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
                    ]))
                    
                    elements.append(event_table)
                    elements.append(Spacer(1, 12))
            
            # Footer
            elements.extend(cls._create_footer())
            
            doc.build(elements)
            buffer.seek(0)
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Failed to generate event account PDF: {str(e)}")
            raise
    
    @classmethod
    def generate_personal_analytics_pdf(cls, report_data: Dict[str, Any]) -> bytes:
        """
        Generate PDF for personal analytics report
        
        Args:
            report_data: Personal analytics report data
            
        Returns:
            PDF bytes
        """
        try:
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72,
                                  topMargin=72, bottomMargin=18)
            
            elements = []
            styles = getSampleStyleSheet()
            
            # Header
            period_str = f"{report_data['period']['start_date'][:10]} to {report_data['period']['end_date'][:10]}"
            subtitle = f"Personal Analytics for {report_data['user_name']} ({period_str})"
            elements.extend(cls._create_header("Personal Analytics Report", subtitle))
            
            # Summary
            summary_style = ParagraphStyle(
                'SummaryHeader',
                parent=styles['Heading2'],
                fontSize=14,
                spaceAfter=12,
                textColor=colors.HexColor('#1f2937')
            )
            
            elements.append(Paragraph("Summary", summary_style))
            
            summary_data = [
                ['Metric', 'Value'],
                ['Total Transactions', str(report_data['summary']['total_transactions'])],
                ['Total Sent', cls._format_currency(report_data['summary']['total_sent'])],
                ['Total Received', cls._format_currency(report_data['summary']['total_received'])],
                ['Net Amount', cls._format_currency(report_data['summary']['net_amount'])],
                ['Current Balance', cls._format_currency(report_data['summary']['current_balance'])]
            ]
            
            summary_table = Table(summary_data, colWidths=[3*inch, 2*inch])
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
            ]))
            
            elements.append(summary_table)
            elements.append(Spacer(1, 20))
            
            # Spending by category
            if report_data['spending_analysis']['categories']:
                elements.append(Paragraph("Spending by Category", summary_style))
                
                category_data = [['Category', 'Amount', 'Percentage']]
                
                for category in report_data['spending_analysis']['categories']:
                    category_data.append([
                        category['category'],
                        cls._format_currency(category['amount']),
                        f"{category['percentage']:.1f}%"
                    ])
                
                category_table = Table(category_data, colWidths=[2.5*inch, 1.5*inch, 1.5*inch])
                category_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                    ('ALIGN', (0, 0), (0, -1), 'LEFT'),
                    ('ALIGN', (1, 0), (-1, -1), 'RIGHT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 10),
                    ('FONTSIZE', (0, 1), (-1, -1), 9),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
                ]))
                
                elements.append(category_table)
                elements.append(Spacer(1, 20))
            
            # Monthly trends
            if report_data['spending_analysis']['monthly_trends']:
                elements.append(Paragraph("Monthly Trends", summary_style))
                
                trend_data = [['Month', 'Sent', 'Received', 'Net']]
                
                for trend in report_data['spending_analysis']['monthly_trends']:
                    trend_data.append([
                        trend['month'],
                        cls._format_currency(trend['sent']),
                        cls._format_currency(trend['received']),
                        cls._format_currency(trend['net'])
                    ])
                
                trend_table = Table(trend_data, colWidths=[1.5*inch, 1.5*inch, 1.5*inch, 1.5*inch])
                trend_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
                    ('ALIGN', (0, 0), (0, -1), 'LEFT'),
                    ('ALIGN', (1, 0), (-1, -1), 'RIGHT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 10),
                    ('FONTSIZE', (0, 1), (-1, -1), 9),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
                ]))
                
                elements.append(trend_table)
            
            # Footer
            elements.extend(cls._create_footer())
            
            doc.build(elements)
            buffer.seek(0)
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Failed to generate personal analytics PDF: {str(e)}")
            raise